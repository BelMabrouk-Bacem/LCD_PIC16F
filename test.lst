CCS PCM C Compiler, Version 5.008, 5967               10-avr.-19 15:53

               Filename:   C:\Users\bacem\Desktop\recherche\LCD\lcd\test.lst

               ROM used:   780 words (10%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           23 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   298
0003:  NOP
.................... //LCD Module Connections 
.................... /*#define LCD_RS_PIN PIN_D2 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_ENABLE_PIN PIN_D3 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7*/ 
....................  
....................  
....................  #define LCD_ENABLE_PIN  PIN_E0                                    //// 
....................  #define LCD_RS_PIN      PIN_E1                                    //// 
....................  #define LCD_RW_PIN      PIN_E2                                    //// 
....................  #define LCD_DATA4       PIN_D4                                    //// 
....................  #define LCD_DATA5       PIN_D5                                    //// 
....................  #define LCD_DATA6       PIN_D6                                    //// 
....................  #define LCD_DATA7       PIN_D7       
....................  
....................  
.................... //End LCD Module Connections 
....................  
.................... #include <test.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,00
000D:  DATA C8,32
000E:  DATA 6C,36
000F:  DATA 6F,10
0010:  DATA D7,37
0011:  DATA 72,36
0012:  DATA 64,00
0013:  DATA 0C,00
0014:  DATA D7,32
0015:  DATA EC,31
0016:  DATA EF,36
0017:  DATA 65,10
0018:  DATA D4,37
0019:  DATA 00,01
001A:  DATA CC,21
001B:  DATA 44,10
001C:  DATA CC,34
001D:  DATA 62,39
001E:  DATA 61,39
001F:  DATA 79,00
0020:  DATA 0C,00
0021:  DATA C3,37
0022:  DATA 75,37
0023:  DATA 74,10
0024:  DATA 3D,10
0025:  DATA 25,32
0026:  DATA 00,00
*
0189:  MOVF   0B,W
018A:  MOVWF  22
018B:  BCF    0B.7
018C:  BSF    03.5
018D:  BSF    03.6
018E:  BSF    0C.7
018F:  BSF    0C.0
0190:  NOP
0191:  NOP
0192:  BCF    03.5
0193:  MOVF   0C,W
0194:  ANDLW  7F
0195:  BTFSC  03.2
0196:  GOTO   1D0
0197:  BCF    03.6
0198:  MOVWF  23
0199:  BSF    03.6
019A:  MOVF   0D,W
019B:  BCF    03.6
019C:  MOVWF  24
019D:  BSF    03.6
019E:  MOVF   0F,W
019F:  BCF    03.6
01A0:  MOVWF  25
01A1:  MOVF   23,W
01A2:  MOVWF  28
01A3:  CALL   15D
01A4:  MOVF   24,W
01A5:  BSF    03.6
01A6:  MOVWF  0D
01A7:  BCF    03.6
01A8:  MOVF   25,W
01A9:  BSF    03.6
01AA:  MOVWF  0F
01AB:  BSF    03.5
01AC:  BSF    0C.7
01AD:  BSF    0C.0
01AE:  NOP
01AF:  NOP
01B0:  BCF    03.5
01B1:  RLF    0C,W
01B2:  RLF    0E,W
01B3:  ANDLW  7F
01B4:  BTFSC  03.2
01B5:  GOTO   1D0
01B6:  BCF    03.6
01B7:  MOVWF  23
01B8:  BSF    03.6
01B9:  MOVF   0D,W
01BA:  BCF    03.6
01BB:  MOVWF  24
01BC:  BSF    03.6
01BD:  MOVF   0F,W
01BE:  BCF    03.6
01BF:  MOVWF  25
01C0:  MOVF   23,W
01C1:  MOVWF  28
01C2:  CALL   15D
01C3:  MOVF   24,W
01C4:  BSF    03.6
01C5:  MOVWF  0D
01C6:  BCF    03.6
01C7:  MOVF   25,W
01C8:  BSF    03.6
01C9:  MOVWF  0F
01CA:  INCF   0D,F
01CB:  BTFSC  03.2
01CC:  INCF   0F,F
01CD:  BCF    03.6
01CE:  GOTO   18C
01CF:  BSF    03.6
01D0:  BCF    03.6
01D1:  BTFSC  22.7
01D2:  BSF    0B.7
01D3:  RETURN
01D4:  MOVF   0B,W
01D5:  MOVWF  23
01D6:  BCF    0B.7
01D7:  BSF    03.5
01D8:  BSF    03.6
01D9:  BSF    0C.7
01DA:  BSF    0C.0
01DB:  NOP
01DC:  NOP
01DD:  BTFSC  03.0
01DE:  GOTO   206
01DF:  BCF    03.5
01E0:  MOVF   0C,W
01E1:  ANDLW  7F
01E2:  BCF    03.6
01E3:  MOVWF  24
01E4:  BSF    03.6
01E5:  MOVF   0D,W
01E6:  BCF    03.6
01E7:  MOVWF  25
01E8:  BSF    03.6
01E9:  MOVF   0F,W
01EA:  BCF    03.6
01EB:  MOVWF  26
01EC:  MOVF   24,W
01ED:  MOVWF  28
01EE:  CALL   15D
01EF:  MOVF   25,W
01F0:  BSF    03.6
01F1:  MOVWF  0D
01F2:  BCF    03.6
01F3:  MOVF   26,W
01F4:  BSF    03.6
01F5:  MOVWF  0F
01F6:  BSF    03.5
01F7:  BSF    0C.7
01F8:  BSF    0C.0
01F9:  NOP
01FA:  NOP
01FB:  BCF    03.5
01FC:  BCF    03.6
01FD:  DECFSZ 22,F
01FE:  GOTO   200
01FF:  GOTO   203
0200:  BSF    03.5
0201:  BSF    03.6
0202:  GOTO   206
0203:  GOTO   225
0204:  BSF    03.5
0205:  BSF    03.6
0206:  BCF    03.5
0207:  RLF    0C,W
0208:  RLF    0E,W
0209:  ANDLW  7F
020A:  BCF    03.6
020B:  MOVWF  24
020C:  BSF    03.6
020D:  MOVF   0D,W
020E:  BCF    03.6
020F:  MOVWF  25
0210:  BSF    03.6
0211:  MOVF   0F,W
0212:  BCF    03.6
0213:  MOVWF  26
0214:  MOVF   24,W
0215:  MOVWF  28
0216:  CALL   15D
0217:  MOVF   25,W
0218:  BSF    03.6
0219:  MOVWF  0D
021A:  BCF    03.6
021B:  MOVF   26,W
021C:  BSF    03.6
021D:  MOVWF  0F
021E:  INCF   0D,F
021F:  BTFSC  03.2
0220:  INCF   0F,F
0221:  BCF    03.0
0222:  BCF    03.6
0223:  DECFSZ 22,F
0224:  GOTO   1D7
0225:  BTFSC  23.7
0226:  BSF    0B.7
0227:  BCF    0A.3
0228:  BCF    0A.4
0229:  GOTO   2FD (RETURN)
022A:  MOVF   29,W
022B:  CLRF   78
022C:  SUBWF  28,W
022D:  BTFSC  03.0
022E:  GOTO   232
022F:  MOVF   28,W
0230:  MOVWF  77
0231:  GOTO   23E
0232:  CLRF   77
0233:  MOVLW  08
0234:  MOVWF  2A
0235:  RLF    28,F
0236:  RLF    77,F
0237:  MOVF   29,W
0238:  SUBWF  77,W
0239:  BTFSC  03.0
023A:  MOVWF  77
023B:  RLF    78,F
023C:  DECFSZ 2A,F
023D:  GOTO   235
023E:  RETURN
023F:  MOVLW  20
0240:  BTFSS  23.4
0241:  MOVLW  30
0242:  MOVWF  24
0243:  MOVF   22,W
0244:  MOVWF  77
0245:  BTFSS  22.7
0246:  GOTO   24F
0247:  COMF   77,F
0248:  INCF   77,F
0249:  MOVF   77,W
024A:  MOVWF  22
024B:  MOVLW  2D
024C:  MOVWF  24
024D:  BSF    23.7
024E:  BSF    23.0
024F:  MOVF   22,W
0250:  MOVWF  28
0251:  MOVLW  64
0252:  MOVWF  29
0253:  CALL   22A
0254:  MOVF   77,W
0255:  MOVWF  22
0256:  MOVLW  30
0257:  ADDWF  78,W
0258:  MOVWF  25
0259:  MOVF   22,W
025A:  MOVWF  28
025B:  MOVLW  0A
025C:  MOVWF  29
025D:  CALL   22A
025E:  MOVLW  30
025F:  ADDWF  77,W
0260:  MOVWF  27
0261:  MOVLW  30
0262:  ADDWF  78,W
0263:  MOVWF  26
0264:  MOVF   24,W
0265:  MOVWF  77
0266:  MOVLW  30
0267:  SUBWF  25,W
0268:  BTFSC  03.2
0269:  GOTO   26E
026A:  BSF    23.1
026B:  BTFSC  23.7
026C:  BSF    23.2
026D:  GOTO   282
026E:  MOVF   24,W
026F:  MOVWF  25
0270:  MOVLW  20
0271:  MOVWF  24
0272:  MOVLW  30
0273:  SUBWF  26,W
0274:  BTFSC  03.2
0275:  GOTO   27A
0276:  BSF    23.0
0277:  BTFSC  23.7
0278:  BSF    23.1
0279:  GOTO   282
027A:  BTFSS  03.2
027B:  BSF    23.0
027C:  BTFSS  03.2
027D:  GOTO   282
027E:  MOVF   25,W
027F:  MOVWF  26
0280:  MOVLW  20
0281:  MOVWF  25
0282:  BTFSC  23.2
0283:  GOTO   289
0284:  BTFSC  23.1
0285:  GOTO   28C
0286:  BTFSC  23.0
0287:  GOTO   28F
0288:  GOTO   292
0289:  MOVF   24,W
028A:  MOVWF  28
028B:  CALL   15D
028C:  MOVF   25,W
028D:  MOVWF  28
028E:  CALL   15D
028F:  MOVF   26,W
0290:  MOVWF  28
0291:  CALL   15D
0292:  MOVF   27,W
0293:  MOVWF  28
0294:  CALL   15D
0295:  BCF    0A.3
0296:  BCF    0A.4
0297:  GOTO   302 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=16000000) 
*
0027:  MOVLW  29
0028:  MOVWF  04
0029:  BCF    03.7
002A:  MOVF   00,W
002B:  BTFSC  03.2
002C:  GOTO   03B
002D:  MOVLW  05
002E:  MOVWF  78
002F:  CLRF   77
0030:  DECFSZ 77,F
0031:  GOTO   030
0032:  DECFSZ 78,F
0033:  GOTO   02F
0034:  MOVLW  2E
0035:  MOVWF  77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  GOTO   039
0039:  DECFSZ 00,F
003A:  GOTO   02D
003B:  RETURN
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A4:  BSF    08.4
....................    output_float(LCD_DATA5); 
00A5:  BSF    08.5
....................    output_float(LCD_DATA6); 
00A6:  BSF    08.6
....................    output_float(LCD_DATA7); 
00A7:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A8:  BCF    03.5
00A9:  BSF    09.2
00AA:  BSF    03.5
00AB:  BCF    09.2
....................    delay_cycles(1); 
00AC:  NOP
....................    lcd_output_enable(1); 
00AD:  BCF    03.5
00AE:  BSF    09.0
00AF:  BSF    03.5
00B0:  BCF    09.0
....................    delay_cycles(1); 
00B1:  NOP
....................    high = lcd_read_nibble(); 
00B2:  BCF    03.5
00B3:  CALL   06B
00B4:  MOVF   78,W
00B5:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
00B6:  BCF    09.0
00B7:  BSF    03.5
00B8:  BCF    09.0
....................    delay_cycles(1); 
00B9:  NOP
....................    lcd_output_enable(1); 
00BA:  BCF    03.5
00BB:  BSF    09.0
00BC:  BSF    03.5
00BD:  BCF    09.0
....................    delay_us(1); 
00BE:  GOTO   0BF
00BF:  GOTO   0C0
....................    low = lcd_read_nibble(); 
00C0:  BCF    03.5
00C1:  CALL   06B
00C2:  MOVF   78,W
00C3:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
00C4:  BCF    09.0
00C5:  BSF    03.5
00C6:  BCF    09.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C7:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00C8:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00C9:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00CA:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00CB:  BCF    03.5
00CC:  SWAPF  30,W
00CD:  MOVWF  77
00CE:  MOVLW  F0
00CF:  ANDWF  77,F
00D0:  MOVF   77,W
00D1:  IORWF  2F,W
00D2:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
006B:  CLRF   31
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
006C:  BSF    03.5
006D:  BSF    08.4
006E:  MOVLW  00
006F:  BCF    03.5
0070:  BTFSC  08.4
0071:  MOVLW  01
0072:  IORWF  31,F
....................    n |= input(LCD_DATA5) << 1; 
0073:  BSF    03.5
0074:  BSF    08.5
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  08.5
0078:  MOVLW  01
0079:  MOVWF  77
007A:  BCF    03.0
007B:  RLF    77,F
007C:  MOVF   77,W
007D:  IORWF  31,F
....................    n |= input(LCD_DATA6) << 2; 
007E:  BSF    03.5
007F:  BSF    08.6
0080:  MOVLW  00
0081:  BCF    03.5
0082:  BTFSC  08.6
0083:  MOVLW  01
0084:  MOVWF  77
0085:  RLF    77,F
0086:  RLF    77,F
0087:  MOVLW  FC
0088:  ANDWF  77,F
0089:  MOVF   77,W
008A:  IORWF  31,F
....................    n |= input(LCD_DATA7) << 3; 
008B:  BSF    03.5
008C:  BSF    08.7
008D:  MOVLW  00
008E:  BCF    03.5
008F:  BTFSC  08.7
0090:  MOVLW  01
0091:  MOVWF  77
0092:  RLF    77,F
0093:  RLF    77,F
0094:  RLF    77,F
0095:  MOVLW  F8
0096:  ANDWF  77,F
0097:  MOVF   77,W
0098:  IORWF  31,F
....................     
....................    return(n); 
0099:  MOVF   31,W
009A:  MOVWF  78
....................   #else 
009B:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
003C:  BTFSC  30.0
003D:  GOTO   040
003E:  BCF    08.4
003F:  GOTO   041
0040:  BSF    08.4
0041:  BSF    03.5
0042:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0043:  BCF    03.5
0044:  BTFSC  30.1
0045:  GOTO   048
0046:  BCF    08.5
0047:  GOTO   049
0048:  BSF    08.5
0049:  BSF    03.5
004A:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
004B:  BCF    03.5
004C:  BTFSC  30.2
004D:  GOTO   050
004E:  BCF    08.6
004F:  GOTO   051
0050:  BSF    08.6
0051:  BSF    03.5
0052:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0053:  BCF    03.5
0054:  BTFSC  30.3
0055:  GOTO   058
0056:  BCF    08.7
0057:  GOTO   059
0058:  BSF    08.7
0059:  BSF    03.5
005A:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
005B:  NOP
....................    lcd_output_enable(1); 
005C:  BCF    03.5
005D:  BSF    09.0
005E:  BSF    03.5
005F:  BCF    09.0
....................    delay_us(2); 
0060:  MOVLW  02
0061:  MOVWF  77
0062:  DECFSZ 77,F
0063:  GOTO   062
0064:  NOP
....................    lcd_output_enable(0); 
0065:  BCF    03.5
0066:  BCF    09.0
0067:  BSF    03.5
0068:  BCF    09.0
0069:  BCF    03.5
006A:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
009C:  BSF    03.5
009D:  BCF    09.0
....................    lcd_rs_tris(); 
009E:  BCF    09.1
....................    lcd_rw_tris(); 
009F:  BCF    09.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A0:  BCF    03.5
00A1:  BCF    09.1
00A2:  BSF    03.5
00A3:  BCF    09.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D3:  MOVF   78,W
00D4:  MOVWF  2F
00D5:  BTFSS  2F.7
00D6:  GOTO   0D9
00D7:  BSF    03.5
00D8:  GOTO   0A4
....................    lcd_output_rs(address); 
00D9:  MOVF   2D,F
00DA:  BTFSS  03.2
00DB:  GOTO   0DE
00DC:  BCF    09.1
00DD:  GOTO   0DF
00DE:  BSF    09.1
00DF:  BSF    03.5
00E0:  BCF    09.1
....................    delay_cycles(1); 
00E1:  NOP
....................    lcd_output_rw(0); 
00E2:  BCF    03.5
00E3:  BCF    09.2
00E4:  BSF    03.5
00E5:  BCF    09.2
....................    delay_cycles(1); 
00E6:  NOP
....................    lcd_output_enable(0); 
00E7:  BCF    03.5
00E8:  BCF    09.0
00E9:  BSF    03.5
00EA:  BCF    09.0
....................    lcd_send_nibble(n >> 4); 
00EB:  BCF    03.5
00EC:  SWAPF  2E,W
00ED:  MOVWF  2F
00EE:  MOVLW  0F
00EF:  ANDWF  2F,F
00F0:  MOVF   2F,W
00F1:  MOVWF  30
00F2:  CALL   03C
....................    lcd_send_nibble(n & 0xf); 
00F3:  MOVF   2E,W
00F4:  ANDLW  0F
00F5:  MOVWF  2F
00F6:  MOVWF  30
00F7:  CALL   03C
00F8:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F9:  BSF    03.5
00FA:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00FB:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00FC:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00FD:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00FE:  BCF    09.0
....................    lcd_rs_tris(); 
00FF:  BCF    09.1
....................    lcd_rw_tris(); 
0100:  BCF    09.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0101:  BCF    03.5
0102:  BCF    09.1
0103:  BSF    03.5
0104:  BCF    09.1
....................    lcd_output_rw(0); 
0105:  BCF    03.5
0106:  BCF    09.2
0107:  BSF    03.5
0108:  BCF    09.2
....................    lcd_output_enable(0); 
0109:  BCF    03.5
010A:  BCF    09.0
010B:  BSF    03.5
010C:  BCF    09.0
....................      
....................    delay_ms(15); 
010D:  MOVLW  0F
010E:  BCF    03.5
010F:  MOVWF  29
0110:  CALL   027
....................    for(i=1;i<=3;++i) 
0111:  MOVLW  01
0112:  MOVWF  22
0113:  MOVF   22,W
0114:  SUBLW  03
0115:  BTFSS  03.0
0116:  GOTO   11F
....................    { 
....................        lcd_send_nibble(3); 
0117:  MOVLW  03
0118:  MOVWF  30
0119:  CALL   03C
....................        delay_ms(5); 
011A:  MOVLW  05
011B:  MOVWF  29
011C:  CALL   027
011D:  INCF   22,F
011E:  GOTO   113
....................    } 
....................     
....................    lcd_send_nibble(2); 
011F:  MOVLW  02
0120:  MOVWF  30
0121:  CALL   03C
....................    delay_ms(5); 
0122:  MOVLW  05
0123:  MOVWF  29
0124:  CALL   027
....................    for(i=0;i<=3;++i) 
0125:  CLRF   22
0126:  MOVF   22,W
0127:  SUBLW  03
0128:  BTFSS  03.0
0129:  GOTO   133
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
012A:  MOVF   22,W
012B:  CALL   004
012C:  MOVWF  23
012D:  CLRF   2D
012E:  MOVF   23,W
012F:  MOVWF  2E
0130:  CALL   09C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0131:  INCF   22,F
0132:  GOTO   126
0133:  BCF    0A.3
0134:  BCF    0A.4
0135:  GOTO   2A8 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
014B:  DECFSZ 2A,W
014C:  GOTO   14E
014D:  GOTO   151
....................       address=LCD_LINE_TWO; 
014E:  MOVLW  40
014F:  MOVWF  2B
0150:  GOTO   152
....................    else 
....................       address=0; 
0151:  CLRF   2B
....................       
....................    address+=x-1; 
0152:  MOVLW  01
0153:  SUBWF  29,W
0154:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
0155:  MOVF   2B,W
0156:  IORLW  80
0157:  MOVWF  2C
0158:  CLRF   2D
0159:  MOVF   2C,W
015A:  MOVWF  2E
015B:  CALL   09C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
015C:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
015D:  MOVF   28,W
015E:  XORLW  07
015F:  BTFSC  03.2
0160:  GOTO   16B
0161:  XORLW  0B
0162:  BTFSC  03.2
0163:  GOTO   170
0164:  XORLW  06
0165:  BTFSC  03.2
0166:  GOTO   178
0167:  XORLW  02
0168:  BTFSC  03.2
0169:  GOTO   17E
016A:  GOTO   183
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
016B:  MOVLW  01
016C:  MOVWF  29
016D:  MOVWF  2A
016E:  CALL   14B
016F:  GOTO   188
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0170:  CLRF   2D
0171:  MOVLW  01
0172:  MOVWF  2E
0173:  CALL   09C
....................                      delay_ms(2); 
0174:  MOVLW  02
0175:  MOVWF  29
0176:  CALL   027
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0177:  GOTO   188
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0178:  MOVLW  01
0179:  MOVWF  29
017A:  MOVLW  02
017B:  MOVWF  2A
017C:  CALL   14B
017D:  GOTO   188
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
017E:  CLRF   2D
017F:  MOVLW  10
0180:  MOVWF  2E
0181:  CALL   09C
0182:  GOTO   188
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0183:  MOVLW  01
0184:  MOVWF  2D
0185:  MOVF   28,W
0186:  MOVWF  2E
0187:  CALL   09C
....................      #endif 
....................    } 
0188:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay (clock=16000000) 
*
0136:  MOVLW  23
0137:  MOVWF  04
0138:  BCF    03.7
0139:  MOVF   00,W
013A:  BTFSC  03.2
013B:  GOTO   14A
013C:  MOVLW  05
013D:  MOVWF  78
013E:  CLRF   77
013F:  DECFSZ 77,F
0140:  GOTO   13F
0141:  DECFSZ 78,F
0142:  GOTO   13E
0143:  MOVLW  2E
0144:  MOVWF  77
0145:  DECFSZ 77,F
0146:  GOTO   145
0147:  GOTO   148
0148:  DECFSZ 00,F
0149:  GOTO   13C
014A:  RETURN
....................  
.................... void main() 
*
0298:  MOVF   03,W
0299:  ANDLW  1F
029A:  MOVWF  03
029B:  BSF    03.5
029C:  BSF    1F.0
029D:  BSF    1F.1
029E:  BSF    1F.2
029F:  BCF    1F.3
02A0:  MOVLW  07
02A1:  MOVWF  1C
02A2:  BCF    03.7
.................... { OUTPUT_HIGH(PIN_A0); 
02A3:  BCF    05.0
02A4:  BCF    03.5
02A5:  BSF    05.0
....................   int i=0; 
02A6:  CLRF   21
....................  
....................   lcd_init(); 
02A7:  GOTO   0F9
....................   Delay_ms(1000); 
02A8:  MOVLW  04
02A9:  MOVWF  22
02AA:  MOVLW  FA
02AB:  MOVWF  23
02AC:  CALL   136
02AD:  DECFSZ 22,F
02AE:  GOTO   2AA
....................  
....................   while(TRUE) 
....................   {  
....................     lcd_putc("\f");                   //Clear Display 
02AF:  MOVLW  0C
02B0:  BSF    03.6
02B1:  MOVWF  0D
02B2:  MOVLW  00
02B3:  MOVWF  0F
02B4:  BCF    03.6
02B5:  CALL   189
....................     lcd_putc("Hello World"); 
02B6:  MOVLW  0D
02B7:  BSF    03.6
02B8:  MOVWF  0D
02B9:  MOVLW  00
02BA:  MOVWF  0F
02BB:  BCF    03.6
02BC:  CALL   189
....................     Delay_ms(8000); 
02BD:  MOVLW  20
02BE:  MOVWF  22
02BF:  MOVLW  FA
02C0:  MOVWF  23
02C1:  CALL   136
02C2:  DECFSZ 22,F
02C3:  GOTO   2BF
....................     lcd_putc("\f");                   //Clear Display 
02C4:  MOVLW  13
02C5:  BSF    03.6
02C6:  MOVWF  0D
02C7:  MOVLW  00
02C8:  MOVWF  0F
02C9:  BCF    03.6
02CA:  CALL   189
....................     lcd_putc("Welcome To"); 
02CB:  MOVLW  14
02CC:  BSF    03.6
02CD:  MOVWF  0D
02CE:  MOVLW  00
02CF:  MOVWF  0F
02D0:  BCF    03.6
02D1:  CALL   189
....................     Delay_ms(8000); 
02D2:  MOVLW  20
02D3:  MOVWF  22
02D4:  MOVLW  FA
02D5:  MOVWF  23
02D6:  CALL   136
02D7:  DECFSZ 22,F
02D8:  GOTO   2D4
....................     lcd_gotoxy(1,2); 
02D9:  MOVLW  01
02DA:  MOVWF  29
02DB:  MOVLW  02
02DC:  MOVWF  2A
02DD:  CALL   14B
....................     lcd_putc("LCD Library"); 
02DE:  MOVLW  1A
02DF:  BSF    03.6
02E0:  MOVWF  0D
02E1:  MOVLW  00
02E2:  MOVWF  0F
02E3:  BCF    03.6
02E4:  CALL   189
....................     Delay_ms(2000); 
02E5:  MOVLW  08
02E6:  MOVWF  22
02E7:  MOVLW  FA
02E8:  MOVWF  23
02E9:  CALL   136
02EA:  DECFSZ 22,F
02EB:  GOTO   2E7
....................     lcd_putc("\f");                   //Clear Display 
02EC:  MOVLW  20
02ED:  BSF    03.6
02EE:  MOVWF  0D
02EF:  MOVLW  00
02F0:  MOVWF  0F
02F1:  BCF    03.6
02F2:  CALL   189
....................     printf(lcd_putc,"Count = %d", i); //Display Count 
02F3:  MOVLW  21
02F4:  BSF    03.6
02F5:  MOVWF  0D
02F6:  MOVLW  00
02F7:  MOVWF  0F
02F8:  BCF    03.0
02F9:  MOVLW  08
02FA:  BCF    03.6
02FB:  MOVWF  22
02FC:  GOTO   1D4
02FD:  MOVF   21,W
02FE:  MOVWF  22
02FF:  MOVLW  18
0300:  MOVWF  23
0301:  GOTO   23F
....................     Delay_ms(2000); 
0302:  MOVLW  08
0303:  MOVWF  22
0304:  MOVLW  FA
0305:  MOVWF  23
0306:  CALL   136
0307:  DECFSZ 22,F
0308:  GOTO   304
....................     i++; 
0309:  INCF   21,F
030A:  GOTO   2AF
....................   } 
.................... } 
....................  
030B:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
